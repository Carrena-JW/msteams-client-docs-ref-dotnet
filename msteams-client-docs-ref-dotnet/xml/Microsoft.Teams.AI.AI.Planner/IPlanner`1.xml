<Type Name="IPlanner&lt;TState&gt;" FullName="Microsoft.Teams.AI.AI.Planner.IPlanner&lt;TState&gt;">
  <TypeSignature Language="C#" Value="public interface IPlanner&lt;TState&gt; where TState : ITurnState&lt;StateBase,StateBase,TempState&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlanner`1&lt;(class Microsoft.Teams.AI.State.ITurnState`3&lt;class Microsoft.Teams.AI.State.StateBase, class Microsoft.Teams.AI.State.StateBase, class Microsoft.Teams.AI.State.TempState&gt;) TState&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Teams.AI.AI.Planner.IPlanner`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlanner(Of TState)" />
  <TypeSignature Language="F#" Value="type IPlanner&lt;'State (requires 'State :&gt; ITurnState&lt;StateBase, StateBase, TempState&gt;)&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Teams.AI</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TState">
      <Constraints>
        <InterfaceName>Microsoft.Teams.AI.State.ITurnState&lt;Microsoft.Teams.AI.State.StateBase,Microsoft.Teams.AI.State.StateBase,Microsoft.Teams.AI.State.TempState&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TState">To be added.</typeparam>
    <summary>
            A planner is responsible for generating a plan that the AI system will execute.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CompletePromptAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; CompletePromptAsync (Microsoft.Bot.Builder.ITurnContext turnContext, TState turnState, Microsoft.Teams.AI.AI.Prompt.PromptTemplate promptTemplate, Microsoft.Teams.AI.AI.AIOptions&lt;TState&gt; options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; CompletePromptAsync(class Microsoft.Bot.Builder.ITurnContext turnContext, !TState turnState, class Microsoft.Teams.AI.AI.Prompt.PromptTemplate promptTemplate, class Microsoft.Teams.AI.AI.AIOptions`1&lt;!TState&gt; options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.AI.Planner.IPlanner`1.CompletePromptAsync(Microsoft.Bot.Builder.ITurnContext,`0,Microsoft.Teams.AI.AI.Prompt.PromptTemplate,Microsoft.Teams.AI.AI.AIOptions{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompletePromptAsync (turnContext As ITurnContext, turnState As TState, promptTemplate As PromptTemplate, options As AIOptions(Of TState), cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member CompletePromptAsync : Microsoft.Bot.Builder.ITurnContext * 'State * Microsoft.Teams.AI.AI.Prompt.PromptTemplate * Microsoft.Teams.AI.AI.AIOptions&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.ITurnState&lt;Microsoft.Teams.AI.State.StateBase, Microsoft.Teams.AI.State.StateBase, Microsoft.Teams.AI.State.TempState&gt;)&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="iPlanner.CompletePromptAsync (turnContext, turnState, promptTemplate, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="turnState" Type="TState" />
        <Parameter Name="promptTemplate" Type="Microsoft.Teams.AI.AI.Prompt.PromptTemplate" />
        <Parameter Name="options" Type="Microsoft.Teams.AI.AI.AIOptions&lt;TState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="turnContext">Context for the current turn of conversation</param>
        <param name="turnState">Application state for the current turn of conversation</param>
        <param name="promptTemplate">Prompt template to complete</param>
        <param name="options">Configuration options for the AI system.</param>
        <param name="cancellationToken" />
        <summary>
            Completes a prompt without returning a plan.
            </summary>
        <returns>The response from the prompt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeneratePlanAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Teams.AI.AI.Planner.Plan&gt; GeneratePlanAsync (Microsoft.Bot.Builder.ITurnContext turnContext, TState turnState, Microsoft.Teams.AI.AI.Prompt.PromptTemplate promptTemplate, Microsoft.Teams.AI.AI.AIOptions&lt;TState&gt; options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Teams.AI.AI.Planner.Plan&gt; GeneratePlanAsync(class Microsoft.Bot.Builder.ITurnContext turnContext, !TState turnState, class Microsoft.Teams.AI.AI.Prompt.PromptTemplate promptTemplate, class Microsoft.Teams.AI.AI.AIOptions`1&lt;!TState&gt; options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.AI.Planner.IPlanner`1.GeneratePlanAsync(Microsoft.Bot.Builder.ITurnContext,`0,Microsoft.Teams.AI.AI.Prompt.PromptTemplate,Microsoft.Teams.AI.AI.AIOptions{`0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeneratePlanAsync (turnContext As ITurnContext, turnState As TState, promptTemplate As PromptTemplate, options As AIOptions(Of TState), cancellationToken As CancellationToken) As Task(Of Plan)" />
      <MemberSignature Language="F#" Value="abstract member GeneratePlanAsync : Microsoft.Bot.Builder.ITurnContext * 'State * Microsoft.Teams.AI.AI.Prompt.PromptTemplate * Microsoft.Teams.AI.AI.AIOptions&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.ITurnState&lt;Microsoft.Teams.AI.State.StateBase, Microsoft.Teams.AI.State.StateBase, Microsoft.Teams.AI.State.TempState&gt;)&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Teams.AI.AI.Planner.Plan&gt;" Usage="iPlanner.GeneratePlanAsync (turnContext, turnState, promptTemplate, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Teams.AI.AI.Planner.Plan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="turnState" Type="TState" />
        <Parameter Name="promptTemplate" Type="Microsoft.Teams.AI.AI.Prompt.PromptTemplate" />
        <Parameter Name="options" Type="Microsoft.Teams.AI.AI.AIOptions&lt;TState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="turnContext">Context for the current turn of conversation</param>
        <param name="turnState">Application state for the current turn of conversation</param>
        <param name="promptTemplate">Prompt template to complete</param>
        <param name="options">Configuration options for the AI system.</param>
        <param name="cancellationToken" />
        <summary>
            Completes a prompt and generates a plan for the AI system to execute.
            </summary>
        <returns>The plan that was generated.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
